AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API Gateway to Kinesis Data Stream to AWS Lambda

# This template builds integration between API Gateway, Kinesis data streams and AWS Lambda

Globals:
  Function:
    MemorySize: 512
    Timeout: 100

Resources:
  # Define REST API for Kinesis data streams using OpenAPI3.0
  KinesisProxy2:
    Type: AWS::Serverless::Api
    DependsOn: ApiKinesisExecutionRole2
    Properties:
      StageName: dev
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./src/api/api.yaml
      

  # Define AWS Kinesis Data Stream
  MyKinesisStream2:
    Type: AWS::Kinesis::Stream
    Properties:
      RetentionPeriodHours: 168
      ShardCount: 1
      Name: KinesisStreamData2
  
  # Define API Gateway role to access Kinesis actions
  ApiKinesisExecutionRole2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess

  # Define API Gateway role to access DynamoDB
  ApiDynamoDBExecutionRole2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        
  # Define an AWS Lambda and attach it to the application consumer
  ApplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handler for Lambda function that process Kinesis data streams
      CodeUri: src/
      Runtime: python3.8
      Handler: app.lambda_handler
      Tracing: Active
      FunctionName: MyStreamFunction2
      Policies:
      - AmazonDynamoDBFullAccess
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt MyKinesisStream2.Arn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
  
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: KinesisStreamData2
      # A list of attributes that describe the key schema for the DynamoDB table.
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: 'TRUE'
  
  KinesisDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: sam-pipeline-kinesis.s3.us-east-1.amazonaws.com
          Id: S3BucketOrigin
          S3OriginConfig:
            OriginAccessIdentity: origin-access-identity/cloudfront/E36GDYVB54RFJ3
        Enabled: 'true'
        Comment: Kinesis Cloudfront distribution with S3 Origin
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: S3BucketOrigin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          
Outputs:
  # Kinesis Data Stream name for data producers to use
  KinesisStream:
    Description: Kinesis Data Stream name
    Value: !Ref MyKinesisStream2
    
  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${KinesisProxy2}.execute-api.${AWS::Region}.amazonaws.com/dev"